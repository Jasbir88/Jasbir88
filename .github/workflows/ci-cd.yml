name: CI/CD Pipeline

permissions:
  contents: read
  actions: read
  pull-requests: write

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

jobs:
  lint-and-test:
    name: üß™ Lint, Validate, and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10] # Removed invalid version 3.1

    steps:
      - name: üõ†Ô∏è Checkout Repository
        uses: actions/checkout@v2

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: ‚öôÔ∏è Set Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üîç Lint and Validate Bash Scripts
        run: |
          echo "üîÑ Checking all shell scripts for linting errors..."
          find . -type f -name "*.sh" -exec shellcheck {} \;
          echo "‚úÖ All scripts passed ShellCheck."

      - name: Validate Bash Script Syntax
        run: |
          echo "Validating bash script syntax..."
          for script in $(find . -type f -name "*.sh"); do
            bash -n "$script" || { echo "Syntax error in $script"; exit 1; }
          done
          echo "All scripts passed syntax validation."

      - name: Ensure Scripts Are Executable
        run: |
          chmod +x *.sh
          chmod +x ./tests/*.sh || true
          echo "Executable permissions ensured."

      - name: Run Tests
        run: |
          echo "Running tests..."
          if [[ -f "./tests/test_sample.sh" ]]; then
            bash ./tests/test_sample.sh
          else
            echo "No test script found. Skipping tests."
          fi
          echo "Tests completed."

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: üì¶ Archive Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.python-version }} # Unique artifact name
          path: ./run_all.log

  test-and-coverage:
    name: Run Tests and Upload Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set Up Node.js
        uses: actions/setup-node@v4

      - name: Install Dependencies
        run: npm install

      - name: Run Tests with Coverage
        run: npx jest --coverage

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  unit-test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set Up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: 3.11

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test with Pytest
        run: |
          pytest --cov --junitxml=junit.xml

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload Test Results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  deployment:
    name: üöÄ Deployment
    runs-on: ubuntu-latest
    needs: [lint-and-test, test-and-coverage, unit-test]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: üõ†Ô∏è Checkout Repository
        uses: actions/checkout@v2

      - name: üöÄ Deploy Application
        run: |
          echo "üîÑ Starting deployment..."
          # Add your deployment script here, for example:
          # ./deploy.sh
          echo "‚úÖ Deployment successful."

      - name: ‚úÖ Verify Deployment
        run: |
          echo "üîÑ Verifying deployment..."
          # Add verification steps here
          echo "‚úÖ Deployment verified."

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "Rolling back deployment..."
          # Add rollback commands here
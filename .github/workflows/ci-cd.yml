name: CI/CD Pipeline

permissions:
  contents: read
  actions: read
  pull-requests: write

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

jobs:
  lint-and-test:
    name: 🧪 Lint, Validate, and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10] # Matrix build for Python versions

    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v2

      - name: Cache Python Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: ⚙️ Set Up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🔍 Lint and Validate Bash Scripts
        run: |
          echo "🔄 Checking all shell scripts for linting errors..."
          find . -type f -name "*.sh" -exec shellcheck {} \;
          echo "✅ All scripts passed ShellCheck."

      - name: Validate Bash Script Syntax
        run: |
          echo "Validating bash script syntax..."
          for script in $(find . -type f -name "*.sh"); do
            bash -n "$script" || { echo "Syntax error in $script"; exit 1; }
          done
          echo "All scripts passed syntax validation."

      - name: Ensure Scripts Are Executable
        run: |
          chmod +x *.sh
          chmod +x ./tests/*.sh || true
          echo "Executable permissions ensured."

      - name: Run Tests
        run: |
          echo "Running tests..."
          if [[ -f "./tests/test_sample.sh" ]]; then
            bash ./tests/test_sample.sh
          else
            echo "No test script found. Skipping tests."
          fi
          echo "Tests completed."

          - name: Upload coverage reports to Codecov
          uses: codecov/codecov-action@v5
          with:
            token: ${{ secrets.CODECOV_TOKEN }}
          
      - name: 📦 Archive Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: ./run_all.log

  deployment:
    name: 🚀 Deployment
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v2

      - name: 🚀 Deploy Application
        run: |
          echo "🔄 Starting deployment..."
          # Add your deployment script here, for example:
          # ./deploy.sh
          echo "✅ Deployment successful."

      - name: ✅ Verify Deployment
        run: |
          echo "🔄 Verifying deployment..."
          # Add verification steps here
          echo "✅ Deployment verified."

      - name: Rollback on Failure
        if: failure()
        run: |
          echo "Rolling back deployment..."
          # Add rollback commands here

  notifications:
    name: Notifications
    runs-on: ubuntu-latest
    if: always()
    needs: [lint-and-test, deployment]

    steps:
      - name: Send Slack Notification on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "❌ CI/CD Workflow Failed: Check GitHub Actions for details. 🚨"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Send Success Notification
        if: success()
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "✅ CI/CD Workflow Succeeded: All checks passed and deployment successful. 🎉"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v2

      - name: Run Security Scan
        run: |
          echo "Running security scan..."
          # Download and install Trivy
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b ./bin
          chmod +x ./bin/trivy
          # Run Trivy scan
          ./bin/trivy fs .

  build:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build and Test
        run: |
          echo "Running build and tests..."
          # Add your build and test commands here
